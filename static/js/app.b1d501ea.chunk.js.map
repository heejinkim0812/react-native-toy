{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","getItem","s","parse","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onChangeText","payload","onSubmitEditing","newToDos","Date","now","value","returnKeyType","blurOnSubmit","placeholder","input","ScrollView","Object","keys","map","key","toDo","toDoText","Platform","OS","confirm","Alert","alert","deleteToDo","Ionicons","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.b1d501ea.chunk.js","sourcesContent":["export const theme = {\r\n  bg: \"black\",\r\n  grey: \"#3A3D40\",\r\n  toDoBg: \"#5C5C60\",\r\n};\r\n","import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Ionicons } from \"@expo/vector-icons\";\n\nimport { theme } from \"./colors\";\n\nconst STORAGE_KEY = \"@toDos\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  useEffect(() => {\n    loadToDos();\n  }, []);\n\n  const work = () => setWorking(true);\n  const travel = () => setWorking(false);\n  const onChangeText = (payload) => setText(payload);\n\n  //AsyncStorage: set,load\n  const saveToDos = async (toSave) => {\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  };\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n    s !== null ? setToDos(JSON.parse(s)) : null;\n  };\n\n  //setToDos, saveToDos\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    //add\n    const newToDos = { ...toDos, [Date.now()]: { text, working } };\n    //set\n    setToDos(newToDos);\n    //save\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n\n  const deleteToDo = (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To Do?\");\n      if (ok) {\n        //delete\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        //set\n        setToDos(newToDos);\n        //save\n        saveToDos(newToDos);\n      } else {\n      }\n    } else {\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"Okay\",\n          onPress: () => {\n            //delete\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            //set\n            setToDos(newToDos);\n            //save\n            saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: working ? \"white\" : theme.grey,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n\n      <TextInput\n        onChangeText={onChangeText}\n        onSubmitEditing={addToDo}\n        value={text}\n        returnKeyType=\"done\"\n        blurOnSubmit\n        placeholder={working ? \"Add a To Do\" : \"Where do you want to go?\"}\n        style={styles.input}\n      />\n\n      <ScrollView>\n        {Object.keys(toDos).map((key) =>\n          toDos[key].working === working ? (\n            <View key={key} style={styles.toDo}>\n              <Text style={styles.toDoText}>{toDos[key].text}</Text>\n              <TouchableOpacity onPress={() => deleteToDo(key)}>\n                <Ionicons name=\"trash\" size={30} color={theme.grey} />\n              </TouchableOpacity>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 40,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n});\n"],"sourceRoot":""}